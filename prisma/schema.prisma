generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("POSTGRES_URL_NON_POOLING")
// }

model User {
  id                       String              @id @default(uuid())
  name                     String
  email                    String              @unique
  role                     String
  password                 String
  gender                   String?
  phone                    String
  address                  String
  businessType             String?
  registrationNumber       String?
  industry                 String?
  resetPasswordToken       String?             @unique
  resetPasswordTokenExpiry String?
  userId                   String
  currency                 String?             @default("NGN")
  Enrollment               Enrollment[]
  Payment                  Payment[]
  CompanyEnrollment        CompanyEnrollment[]
}

model Enrollment {
  id                String              @id @default(uuid())
  enrollmentId      String
  userId            String
  phone             String?
  email             String?
  course            String
  date              String
  status            String
  amount            BigInt
  noOfUsers         Int?
  timeTable         String?
  currency          String?
  paymentType       String?
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Payment           Payment[]
  CompanyEnrollment CompanyEnrollment[]

  @@index([userId])
}

model CompanyEnrollment {
  id           String     @id @default(uuid())
  name         String
  email        String
  phoneNumber  String
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  companyId    String
  company      User       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([enrollmentId])
  @@index([companyId])
}

model Payment {
  id            String     @id @default(uuid())
  userId        String
  course        String
  date          String
  amount        BigInt
  paymentStatus String
  paymentId     String
  enrollmentId  String
  currency      String?
  paymentType   String?
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([enrollmentId])
  @@index([userId])
}
